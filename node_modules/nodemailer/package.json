{
  "_args": [
    [
      "nodemailer",
      "/Users/Mikaela/Downloads/seniorProject/greetings"
    ]
  ],
  "_from": "nodemailer@*",
  "_id": "nodemailer@2.3.0",
  "_inCache": true,
  "_location": "/nodemailer",
  "_nodeVersion": "5.7.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/nodemailer-2.3.0.tgz_1456995464077_0.4318550922907889"
  },
  "_npmUser": {
    "email": "andris@kreata.ee",
    "name": "andris"
  },
  "_npmVersion": "3.6.0",
  "_phantomChildren": {},
  "_requested": {
    "name": "nodemailer",
    "raw": "nodemailer",
    "rawSpec": "",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/nodemailer/-/nodemailer-2.3.0.tgz",
  "_shasum": "7038dc6952c7e60a95e9f5186d1b7c9570cc06bc",
  "_shrinkwrap": null,
  "_spec": "nodemailer",
  "_where": "/Users/Mikaela/Downloads/seniorProject/greetings",
  "author": {
    "name": "Andris Reinman"
  },
  "bugs": {
    "url": "https://github.com/nodemailer/nodemailer/issues"
  },
  "dependencies": {
    "libmime": "2.0.3",
    "mailcomposer": "3.6.3",
    "nodemailer-direct-transport": "3.0.6",
    "nodemailer-shared": "1.0.4",
    "nodemailer-smtp-pool": "2.5.1",
    "nodemailer-smtp-transport": "2.4.1",
    "socks": "1.1.8"
  },
  "description": "Easy as cake e-mail sending from your Node.js applications",
  "devDependencies": {
    "amqp": "^0.2.4",
    "chai": "^3.5.0",
    "email-templates": "^2.1.0",
    "grunt": "^0.4.5",
    "grunt-cli": "^0.1.13",
    "grunt-eslint": "^18.0.0",
    "grunt-mocha-test": "^0.12.7",
    "handlebars": "^4.0.5",
    "mocha": "^2.4.5",
    "nodemailer-dkim": "^1.0.3",
    "nodemailer-markdown": "^1.0.0",
    "nodemailer-stub-transport": "^1.0.0",
    "proxy-test-server": "^1.0.0",
    "sinon": "^1.17.3",
    "smtp-server": "^1.9.0",
    "swig-email-templates": "^2.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "7038dc6952c7e60a95e9f5186d1b7c9570cc06bc",
    "tarball": "https://registry.npmjs.org/nodemailer/-/nodemailer-2.3.0.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "7c3901a9f310b501ea51bdd273531bc68cfff63a",
  "homepage": "http://nodemailer.com/",
  "installable": true,
  "keywords": [
    "e-mail",
    "email",
    "mail",
    "mime",
    "sendmail",
    "ses",
    "smtp"
  ],
  "license": "MIT",
  "main": "lib/nodemailer.js",
  "maintainers": [
    {
      "name": "andris",
      "email": "andris@node.ee"
    }
  ],
  "name": "nodemailer",
  "optionalDependencies": {},
  "readme": "![Nodemailer](https://raw.githubusercontent.com/nodemailer/nodemailer/master/assets/nm_logo_200x136.png)\r\n\r\nSend e-mails from Node.js ‚Äì easy as cake! üç∞‚úâÔ∏è\r\n\r\n<a href=\"https://gitter.im/nodemailer/nodemailer?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\"><img src=\"https://badges.gitter.im/Join Chat.svg\" alt=\"Gitter chat\" height=\"18\"></a> <a href=\"http://travis-ci.org/nodemailer/nodemailer\"><img src=\"https://secure.travis-ci.org/nodemailer/nodemailer.svg\" alt=\"Build Status\" height=\"18\"></a> <a href=\"http://badge.fury.io/js/nodemailer\"><img src=\"https://badge.fury.io/js/nodemailer.svg\" alt=\"NPM version\" height=\"18\"></a> <a href=\"https://www.npmjs.com/package/nodemailer\"><img src=\"https://img.shields.io/npm/dt/nodemailer.svg\" alt=\"NPM downloads\" height=\"18\"></a>\r\n\r\n# Notes and information\r\n## Nodemailer supports\r\n  - **Node.js 0.10+**, no ES6 shenanigans used that would break your production app\r\n  - **Unicode** to use any characters, including full emoji support üëª\r\n  - **Windows** ‚Äì you can install it with _npm_ on Windows just like any other module, there are no compiled dependencies. Use it from Azure or from your Windows box hassle free.\r\n  - **HTML content** as well as **plain text** alternative\r\n  - **Attachments** (including attachment **streaming** for sending larger files)\r\n  - **Embedded images** in HTML\r\n  - Secure e-mail delivery using **SSL/STARTTLS**\r\n  - Different **transport methods**, either using built-in SMTP transports or from external plugins\r\n  - Custom **plugin support** for manipulating messages (add DKIM signatures, use markdown content instead of HTML etc.)\r\n  - Sane **XOAUTH2** login with automatic access token generation (and feedback about the updated tokens)\r\n  - Simple built-in **templating** using [node-email-templates](https://github.com/niftylettuce/node-email-templates) or custom renderer\r\n  - **Proxies** for SMTP connections (SOCKS, HTTP and custom connections)\r\n\r\n> See Nodemailer [homepage](http://nodemailer.com/) for complete documentation\r\n\r\n## Support Nodemailer development\r\n[![Donate to author](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=DB26KWR2BQX5W)\r\n\r\nIf you want to support with Bitcoins, then my wallet address is `15Z8ADxhssKUiwP3jbbqJwA21744KMCfTM`\r\n\r\n# TL;DR Usage Example\r\nThis is a complete example to send an e-mail with plaintext and HTML body\r\n\r\n```javascript\r\nvar nodemailer = require('nodemailer');\r\n\r\n// create reusable transporter object using the default SMTP transport\r\nvar transporter = nodemailer.createTransport('smtps://user%40gmail.com:pass@smtp.gmail.com');\r\n\r\n// setup e-mail data with unicode symbols\r\nvar mailOptions = {\r\n    from: '\"Fred Foo üë•\" <foo@blurdybloop.com>', // sender address\r\n    to: 'bar@blurdybloop.com, baz@blurdybloop.com', // list of receivers\r\n    subject: 'Hello ‚úî', // Subject line\r\n    text: 'Hello world üê¥', // plaintext body\r\n    html: '<b>Hello world üê¥</b>' // html body\r\n};\r\n\r\n// send mail with defined transport object\r\ntransporter.sendMail(mailOptions, function(error, info){\r\n    if(error){\r\n        return console.log(error);\r\n    }\r\n    console.log('Message sent: ' + info.response);\r\n});\r\n```\r\n\r\n> To use Gmail you may need to configure [\"Allow Less Secure Apps\"](https://www.google.com/settings/security/lesssecureapps) in your Gmail account unless you are using 2FA in which case you would have to create an [Application Specific](https://security.google.com/settings/security/apppasswords) password. You also may need to unlock your account with [\"Allow access to your Google account\"](https://accounts.google.com/DisplayUnlockCaptcha) to use SMTP.\r\n\r\n# Setting up\r\nInstall with npm\r\n\r\n```\r\nnpm install nodemailer\r\n```\r\n\r\nTo send e-mails you need a transporter object\r\n\r\n```javascript\r\nvar transporter = nodemailer.createTransport(transport[, defaults])\r\n```\r\n\r\nWhere\r\n  - **transporter** is going to be an object that is able to send mail\r\n  - **transport** is the transport configuration object, connection url or a transport plugin instance\r\n  - **defaults** is an object that defines default values for mail options\r\n\r\n> You have to create the transporter object only once. If you already have a transporter object you can use it to send mail as much as you like.\r\n\r\n## Send using SMTP\r\n\r\n### SMTP? Say what?\r\n\r\nYou might wonder why you would need to set something up while in comparison\r\nPHP's [mail](http://php.net/manual/en/function.mail.php) command works out of\r\nthe box with no special configuration whatsoever. Just call `mail(...)` and\r\nyou're already sending mail. So what's going on in Node.js?\r\n\r\nThe difference is in the software stack required for your application to work.\r\nWhile Node.js stack is thin, all you need for your app to work is the *node*\r\nbinary, then PHP's stack is fat. The server you're running your PHP code on has\r\nseveral different components installed. Firstly the PHP interpreter itself. Then\r\nthere's some kind of web server, most probably Apache or Nginx. Web server needs\r\nsome way to interact with the PHP interpreter, so you have a CGI process\r\nmanager. There might be MySQL also running in the same host. Depending on the\r\ninstallation type you might even have imagemagick executables or other helpers\r\nlying around somewhere. And finally, you have the *sendmail* binary.\r\n\r\nWhat PHP's `mail()` call actually does is that it passes your mail data to\r\nsendmail's *stdin* and thats it, no magic involved. *sendmail* does all the\r\nheavy lifting of queueing your message and trying to send it to the recipients'\r\nMX mail server. Usually this works because the server is an actual web server\r\naccessible from the web and has also gathered some mail sending reputation\r\nbecause PHP web hosts have been around for, like, forever.\r\n\r\nNode.js apps on the other hand might run wherever, usually on some really new\r\nVPS behind an IP address that has no sending reputation at all. Or the IP is\r\ndynamically allocated which is the fastest way to get rejected while trying to\r\nsend mail. So while you might actually emulate the same behavior with Nodemailer\r\nby using either the [sendmail transport](https://github.com/andris9/nodemailer-sendmail-transport)\r\nor so called *direct* transport, then this does not guarantee yet any\r\ndeliverability. Recipient's server might reject connection from your app because\r\nyour server has dynamic IP address. Or it might reject or send your mail\r\nstraight to spam mailbox because your IP address is not yet trusted.\r\n\r\nSo the reason why PHP's `mail` works and Node.js's does not is that your PHP\r\nhosting provider has put in a lot of work over several years to provide a solid\r\nmail sending infrastructure. It is not about PHP at all, it is about the\r\ninfrastructure around it.\r\n\r\n### Set up SMTP\r\n\r\nYou can use 3 kinds of different approaches when using SMTP\r\n\r\n  1. *normal* usage. No specific configuration needed. For every e-mail a new SMTP connection is created and message is sent immediately. Used when the amount of sent messages is low.\r\n  1. *pooled* usage. Set *pool* option to `true` to use it. A fixed amount of pooled connections are used to send messages. Useful when you have a large number of messages that you want to send in batches.\r\n  1. *direct* usage. Set *direct* option to `true` to use it. SMTP connection is opened directly to recipients MX server, skipping any local SMTP relays. useful when you do not have a SMTP relay to use. Riskier though since messages from untrusted servers usually end up in the Spam folder.\r\n\r\n```javascript\r\nvar transporter = nodemailer.createTransport(options[, defaults])\r\n```\r\n\r\nWhere\r\n\r\n  * **options** defines connection data\r\n    * **options.pool** if set to `true` uses pooled connections (defaults to `false`), otherwise creates a new connection for every e-mail.\r\n    * **options.direct** if set to `true`, bypasses MTA relay and connects directly to recipients MX. Easier to set up but has higher chances of ending up in the Spam folder\r\n    * **options.service** can be set to the name of a well-known service so you don't have to input the `port`, `host`, and `secure` options (see [Using well-known services](#using-well-known-services))\r\n    * **options.port** is the port to connect to (defaults to 25 or 465)\r\n    * **options.host** is the hostname or IP address to connect to (defaults to `'localhost'`)\r\n    * **options.secure** if `true`the connection will only use TLS. If `false` (the default), TLS may still be upgraded to if available via the STARTTLS command.\r\n    * **options.ignoreTLS** if this is `true` and `secure` is false, TLS will not be used (either to connect, or as a STARTTLS connection upgrade command).\r\n    * **options.requireTLS** if this is `true` and `secure` is false, it forces Nodemailer to use STARTTLS even if the server does not advertise support for it.\r\n    * **options.tls** defines additional [node.js TLSSocket options](https://nodejs.org/api/tls.html#tls_class_tls_tlssocket) to be passed to the socket constructor, eg. *{rejectUnauthorized: true}*.\r\n    * **options.auth** defines authentication data (see [authentication](#authentication) section below)\r\n    * **options.authMethod** defines preferred authentication method, eg. 'PLAIN'\r\n    * **options.name** optional hostname of the client, used for identifying to the server\r\n    * **options.localAddress** is the local interface to bind to for network connections\r\n    * **options.connectionTimeout** how many milliseconds to wait for the connection to establish\r\n    * **options.greetingTimeout** how many milliseconds to wait for the greeting after connection is established\r\n    * **options.socketTimeout** how many milliseconds of inactivity to allow\r\n    * **options.logger** optional [bunyan](https://github.com/trentm/node-bunyan) compatible logger instance. If set to `true` then logs to console. If value is not set or is `false` then nothing is logged\r\n    * **options.debug** if set to true, then logs SMTP traffic, otherwise logs only transaction events\r\n    * **options.maxConnections** available only if *pool* is set to `true`. (defaults to 5) is the count of maximum simultaneous connections to make against the SMTP server\r\n    * **options.maxMessages** available only if *pool* is set to `true`. (defaults to 100) limits the message count to be sent using a single connection. After maxMessages messages the connection is dropped and a new one is created for the following messages\r\n    * **options.rateLimit** available only if *pool* is set to `true`. (defaults to `false`) limits the message count to be sent in a second. Once rateLimit is reached, sending is paused until the end of the second. This limit is shared between connections, so if one connection uses up the limit, then other connections are paused as well\r\n\r\n**Examples**\r\n\r\n```javascript\r\nvar smtpConfig = {\r\n    host: 'smtp.gmail.com',\r\n    port: 465,\r\n    secure: true, // use SSL\r\n    auth: {\r\n        user: 'user@gmail.com',\r\n        pass: 'pass'\r\n    }\r\n};\r\n\r\nvar poolConfig = {\r\n    pool: true,\r\n    host: 'smtp.gmail.com',\r\n    port: 465,\r\n    secure: true, // use SSL\r\n    auth: {\r\n        user: 'user@gmail.com',\r\n        pass: 'pass'\r\n    }\r\n};\r\n\r\nvar directConfig = {\r\n    name: 'hostname' // must be the same that can be reverse resolved by DNS for your IP\r\n};\r\n```\r\n\r\nAlternatively you could use connection url. Use `smtp:`, `smtps:` or `direct:` as the protocol.\r\n\r\n```javascript\r\nvar smtpConfig = 'smtps://user%40gmail.com:pass@smtp.gmail.com';\r\nvar poolConfig = 'smtps://user%40gmail.com:pass@smtp.gmail.com/?pool=true';\r\nvar directConfig = 'direct:?name=hostname';\r\n```\r\n\r\n### Proxy support\r\n\r\nNodemailer supports out of the box HTTP and SOCKS proxies for SMTP connections with the `proxy` configuration option. You can also use a custom connection handler with the `getSocket` method.\r\n\r\nProxy configuration is provided as a connection url where used protocol defines proxy protocol (eg. `'socks://hostname:port'` for a SOCKS5 proxy). You can also use authentication by passing proxy username and password into the configuration url (eg `'socks://username:password@hostname:port'`)\r\n\r\n#### HTTP CONNECT tunnel\r\n\r\nHTTP proxy must support CONNECT tunnels (also called \"SSL support\") to SMTP ports. To use a HTTP/S server, provide a `proxy` option to SMTP configuration with the HTTP proxy configuration URL.\r\n\r\n```javascript\r\nvar smtpConfig = {\r\n    host: 'smtp.gmail.com',\r\n    port: 465,\r\n    ...,\r\n    //proxy config\r\n    // assumes a HTTP proxy running on port 3128\r\n    proxy: 'http://localhost:3128/'\r\n};\r\n```\r\n\r\nPossible protocol values for the HTTP proxy:\r\n\r\n  * `'http:'` if the proxy is running in a plaintext server\r\n  * `'https:'` if the proxy is running in a secure server\r\n\r\n> NB! Proxy protocol (http/s) does not affect how SMTP connection is secured or not\r\n\r\nSee an example of using a HTTP proxy [here](examples/proxy/http-proxy.js).\r\n\r\n#### SOCKS 4/5\r\n\r\nTo use a HTTP/S server, provide a `proxy` option to SMTP configuration with the SOCKS4/5 proxy configuration URL.\r\n\r\n```javascript\r\nvar smtpConfig = {\r\n    host: 'smtp.gmail.com',\r\n    port: 465,\r\n    ...,\r\n    //proxy config\r\n    // assumes a SOCKS5 proxy running on port 1080\r\n    proxy: 'socks5://localhost:1080/'\r\n};\r\n```\r\n\r\n> **NB!** When using SOCKS4, only an ipv4 address can be used\r\n\r\nPossible protocol values for the SOCKS proxy:\r\n\r\n  * `'socks4:'` or `'socks4a:'` for a SOCKS4 proxy\r\n  * `'socks5:'` or `'socks:'` for a SOCKS5 proxy\r\n\r\nSee an example of using a SOCKS proxy [here](examples/proxy/socks-proxy.js).\r\n\r\n#### Custom connection handler\r\n\r\nIf you do not want to use SOCKS or HTTP proxies then you can alternatively provide a custom\r\nproxy handling code with the `getSocket` method. In this case you should initiate a new\r\nsocket yourself and pass it to Nodemailer for usage.\r\n\r\n```javascript\r\n// This method is called every time Nodemailer needs a new\r\n// connection against the SMTP server\r\ntransporter.getSocket = function(options, callback){\r\n    getProxySocketSomehow(options.port, options.host, function(err, socket){\r\n        if(err){\r\n            return callback(err);\r\n        }\r\n        callback(null, {\r\n            connection: socket\r\n        });\r\n    });\r\n};\r\n```\r\n\r\nNormally proxies provide plaintext sockets, so if the connection is supposed to use TLS\r\nthen Nodemailer upgrades the socket from plaintext to TLS itself. If the socket is\r\nalready upgraded then you can pass additional option `secured: true` to prevent Nodemailer\r\nfrom upgrading the already upgraded socket.\r\n\r\n```javascript\r\ncallback(null, {\r\n    connection: socket,\r\n    secured: true\r\n});\r\n```\r\n\r\nSee complete example using a custom socket connector [here](examples/proxy/custom-proxy.js).\r\n\r\n### Events\r\n\r\n#### Event:'idle'\r\n\r\nApplies to pooled SMTP connections. Emitted by the transport object if connection pool has free connection slots. Check if a connection is still available with `isIdle()` method (returns `true` if a connection is still available). This allows to create push-like senders where messages are not queued into memory in a Node.js process but pushed and loaded through an external queue like RabbitMQ.\r\n\r\n```javascript\r\nvar messages = [...'list of messages'];\r\ntransporter.on('idle', function(){\r\n    // send next messages from the pending queue\r\n    while(transporter.isIdle() && messages.length){\r\n        transporter.send(messages.shift());\r\n    }\r\n});\r\n```\r\n\r\n### Authentication\r\n\r\nIf authentication data is not present, the connection is considered authenticated from the start. Set authentication data with `options.auth`\r\n\r\n  - **auth** is the authentication object\r\n    - **auth.user** is the username\r\n    - **auth.pass** is the password for the user\r\n    - **auth.xoauth2** is the OAuth2 access token (preferred if both `pass` and `xoauth2` values are set) or an [XOAuth2](https://github.com/andris9/xoauth2) token generator object.\r\n\r\n**Using OAuth2**\r\n\r\nIf a [XOAuth2](https://github.com/andris9/xoauth2) token generator is used as the value for `auth.xoauth2` then you do not need to set the value for `user` or `pass`. XOAuth2 generator generates required `accessToken` itself if it is missing or expired. In this case if the authentication fails, a new token is requested and the authentication is retried once. If it still fails, an error is returned.\r\n\r\n> **NB!** The correct OAuth2 scope for Gmail is `https://mail.google.com/`\r\n\r\nInstall xoauth2 module to use XOauth2 token generators (not included by default)\r\n\r\n    npm install xoauth2 --save\r\n\r\n**Example**\r\n\r\n```javascript\r\nvar nodemailer = require('nodemailer');\r\nvar xoauth2 = require('xoauth2');\r\n\r\n// listen for token updates (if refreshToken is set)\r\n// you probably want to store these to a db\r\ngenerator.on('token', function(token){\r\n    console.log('New token for %s: %s', token.user, token.accessToken);\r\n});\r\n\r\n// login\r\nvar transporter = nodemailer.createTransport({\r\n    service: 'gmail',\r\n    auth: {\r\n        xoauth2: xoauth2.createXOAuth2Generator({\r\n            user: '{username}',\r\n            clientId: '{Client ID}',\r\n            clientSecret: '{Client Secret}',\r\n            refreshToken: '{refresh-token}',\r\n            accessToken: '{cached access token}'\r\n        })\r\n    }\r\n});\r\n```\r\n\r\n### Using *well-known* services\r\n\r\nIf you do not want to specify the hostname, port and security settings for a well known service, you can use it by its name (case insensitive)\r\n\r\n```javascript\r\nsmtpTransport({\r\n    service: 'gmail',\r\n    auth: ..\r\n});\r\n```\r\n\r\nSee the list of all supported services [here](https://github.com/andris9/nodemailer-wellknown#supported-services).\r\n\r\n## Verify SMTP connection configuration\r\n\r\nYou can verify your SMTP configuration with `verify(callback)` call (also works as a Promise). If it returns an error, then something is not correct, otherwise the server is ready to accept messages.\r\n\r\n```javascript\r\n// verify connection configuration\r\ntransporter.verify(function(error, success) {\r\n   if (error) {\r\n        console.log(error);\r\n   } else {\r\n        console.log('Server is ready to take our messages');\r\n   }\r\n});\r\n```\r\n\r\n## Send using a transport plugin\r\n\r\nIn addition to SMTP you can use other kind of transports as well with Nodemailer. See *Available Transports* below for known transports.\r\n\r\nThe following example uses [nodemailer-ses-transport](https://github.com/andris9/nodemailer-ses-transport) (Amazon SES).\r\n\r\n```javascript\r\nvar nodemailer = require('nodemailer');\r\nvar ses = require('nodemailer-ses-transport');\r\nvar transporter = nodemailer.createTransport(ses({\r\n    accessKeyId: 'AWSACCESSKEY',\r\n    secretAccessKey: 'AWS/Secret/key'\r\n}));\r\n```\r\n\r\nIf the transport plugin follows common conventions, then you can also load it dynamically with the `transport` option. This way you would not have to load the transport plugin in your code (you do need to install the transport plugin though before you can use it), you only need to modify the configuration data accordingly.\r\n\r\n```javascript\r\nvar nodemailer = require('nodemailer');\r\nvar transporter = nodemailer.createTransport({\r\n    transport: 'ses', // loads nodemailer-ses-transport\r\n    accessKeyId: 'AWSACCESSKEY',\r\n    secretAccessKey: 'AWS/Secret/key'\r\n});\r\n```\r\n\r\n**Available Transports**\r\n\r\n  - **[nodemailer-mandrill-transport](https://github.com/rebelmail/nodemailer-mandrill-transport)** for sending messages through Mandrill's Web API\r\n  - **[nodemailer-pickup-transport](https://github.com/andris9/nodemailer-pickup-transport)** for storing messages to pickup folders\r\n  - **[nodemailer-sailthru-transport](https://github.com/rebelmail/nodemailer-sailthru-transport)** for sending messages through Sailthru's Web API\r\n  - **[nodemailer-sendgrid-transport](https://github.com/sendgrid/nodemailer-sendgrid-transport)** for sending messages through SendGrid's Web API\r\n  - **[nodemailer-sendmail-transport](https://github.com/andris9/nodemailer-sendmail-transport)** for piping messages to the _sendmail_ command\r\n  - **[nodemailer-ses-transport](https://github.com/andris9/nodemailer-ses-transport)** for sending messages to AWS SES\r\n  - **[nodemailer-sparkpost-transport](https://github.com/sparkpost/nodemailer-sparkpost-transport)** for sending messages through SparkPost's Web API\r\n  - **[nodemailer-stub-transport](https://github.com/andris9/nodemailer-stub-transport)** is just for returning messages, most probably for testing purposes\r\n  - **[nodemailer-wellknown](https://github.com/nodemailer/nodemailer-wellknown)** for sending messages through one of those many [supported services](https://github.com/nodemailer/nodemailer-wellknown#supported-services)\r\n  - _add yours_ (see transport api documentation [here](#transports))\r\n\r\n# Sending mail\r\nOnce you have a transporter object you can send mail with it:\r\n\r\n```javascript\r\ntransporter.sendMail(data[, callback])\r\n```\r\n\r\nWhere\r\n  - **data** defines the mail content (see [e-mail message fields](#e-mail-message-fields) below)\r\n  - **callback** is an optional callback function to run once the message is delivered or it failed\r\n    - **err** is the error object if message failed\r\n    - **info** includes the result, the exact format depends on the transport mechanism used\r\n      - **info.messageId** most transports _should_ return the final Message-Id value used with this property\r\n      - **info.envelope** includes the envelope object for the message\r\n      - **info.accepted** is an array returned by SMTP transports (includes recipient addresses that were accepted by the server)\r\n      - **info.rejected** is an array returned by SMTP transports (includes recipient addresses that were rejected by the server)\r\n      - **info.pending** is an array returned by Direct SMTP transport. Includes recipient addresses that were temporarily rejected together with the server response\r\n      - **response** is a string returned by SMTP transports and includes the last SMTP response from the server\r\n\r\n> If the message includes several recipients then the message is considered sent if at least one recipient is accepted\r\n\r\nIf `callback` argument is not set then the method returns a Promise object. Nodemailer itself does not use Promises internally but it wraps the return into a Promise for convenience.\r\n\r\n## E-mail message fields\r\nThe following are the possible fields of an e-mail message:\r\n\r\nCommmon fields:\r\n\r\n  - **from** - The e-mail address of the sender. All e-mail addresses can be plain `'sender@server.com'` or formatted `'\"Sender Name\" <sender@server.com>'`, see [Address Formatting](#address-formatting) for details\r\n  - **to** - Comma separated list or an array of recipients e-mail addresses that will appear on the _To:_ field\r\n  - **cc** - Comma separated list or an array of recipients e-mail addresses that will appear on the _Cc:_ field\r\n  - **bcc** - Comma separated list or an array of recipients e-mail addresses that will appear on the _Bcc:_ field\r\n  - **subject** - The subject of the e-mail\r\n  - **text** - The plaintext version of the message as an Unicode string, Buffer, Stream or an attachment-like object (`{path: '/var/data/...'}`)\r\n  - **html** - The HTML version of the message as an Unicode string, Buffer, Stream or an attachment-like object (`{path: 'http://...'}`)\r\n  - **attachments** - An array of attachment objects  (see [below](#attachments) for details)\r\n\r\nAdvanced fields:\r\n\r\n  - **sender** - An e-mail address that will appear on the _Sender:_ field (always prefer `from` if you're not sure which one to use)\r\n  - **replyTo** - An e-mail address that will appear on the _Reply-To:_ field\r\n  - **inReplyTo** - The message-id this message is replying to\r\n  - **references** - Message-id list (an array or space separated string)\r\n  - **watchHtml** - Apple Watch specific HTML version of the message. Same usage as with `text` or `html`\r\n  - **icalEvent** ‚Äì iCalendar event to use as an alternative. Same usage as with `text` or `html`. Additionally you could set `method` property (defaults to `'PUBLISH'`). See an example [here](examples/ical-event.js)\r\n  - **priority** - Sets message importance headers, either `'high'`, `'normal'` (default) or `'low'`.\r\n  - **headers** - An object or array of additional header fields (e.g. _{\"X-Key-Name\": \"key value\"}_ or _[{key: \"X-Key-Name\", value: \"val1\"}, {key: \"X-Key-Name\", value: \"val2\"}]_)\r\n  - **alternatives** - An array of alternative text contents (in addition to text and html parts)  (see [below](#alternatives) for details)\r\n  - **envelope** - optional SMTP envelope, if auto generated envelope is not suitable (see [below](#smtp-envelope) for details)\r\n  - **messageId** - optional Message-Id value, random value will be generated if not set\r\n  - **date** - optional Date value, current UTC string will be used if not set\r\n  - **encoding** - optional transfer encoding for the textual parts\r\n  - **raw** - existing MIME message to use instead of generating a new one. If this value is set then you should also set the envelope object (if required) as the provided raw message is not parsed. The value could be a string, a buffer, a stream or an attachment-like object.\r\n  - **textEncoding** - force content-transfer-encoding for text values (either *quoted-printable* or *base64*). By default the best option is detected (for lots of ascii use *quoted-printable*, otherwise *base64*)\r\n  - **list** - helper for setting List-\\* headers\r\n\r\nAll text fields (e-mail addresses, plaintext body, html body, attachment filenames) use UTF-8 as the encoding. Attachments are streamed as binary.\r\n\r\n> **NB!** When using readable streams as any kind of content and sending fails then Nodemailer does not abort the already opened but not yet finished stream automatically, you need to do this yourself\r\n\r\n```javascript\r\nvar htmlstream = fs.createReadStream('content.html');\r\ntransport.sendMail({html: htmlstream}, function(err){\r\n    if(err){\r\n        // check if htmlstream is still open and close it to clean up\r\n    }\r\n});\r\n```\r\n\r\n## Attachments\r\nAttachment object consists of the following properties:\r\n\r\n  - **filename** - filename to be reported as the name of the attached file, use of unicode is allowed\r\n  - **content** - String, Buffer or a Stream contents for the attachment\r\n  - **path** - path to a file or an URL (data uris are allowed as well) if you want to stream the file instead of including it (better for larger attachments)\r\n  - **contentType** - optional content type for the attachment, if not set will be derived from the `filename` property\r\n  - **contentDisposition** - optional content disposition type for the attachment, defaults to 'attachment'\r\n  - **cid** - optional content id for using inline images in HTML message source\r\n  - **encoding** - If set and `content` is string, then encodes the content to a Buffer using the specified encoding. Example values: `base64`, `hex`, `binary` etc. Useful if you want to use binary attachments in a JSON formatted e-mail object.\r\n  - **headers** - custom headers for the attachment node. Same usage as with message headers\r\n  - **raw** - is an optional special value that overrides entire contents of current mime node including mime headers. Useful if you want to prepare node contents yourself\r\n\r\nAttachments can be added as many as you want.\r\n\r\n**Example**\r\n\r\n```javascript\r\nvar mailOptions = {\r\n    ...\r\n    attachments: [\r\n        {   // utf-8 string as an attachment\r\n            filename: 'text1.txt',\r\n            content: 'hello world!'\r\n        },\r\n        {   // binary buffer as an attachment\r\n            filename: 'text2.txt',\r\n            content: new Buffer('hello world!','utf-8')\r\n        },\r\n        {   // file on disk as an attachment\r\n            filename: 'text3.txt',\r\n            path: '/path/to/file.txt' // stream this file\r\n        },\r\n        {   // filename and content type is derived from path\r\n            path: '/path/to/file.txt'\r\n        },\r\n        {   // stream as an attachment\r\n            filename: 'text4.txt',\r\n            content: fs.createReadStream('file.txt')\r\n        },\r\n        {   // define custom content type for the attachment\r\n            filename: 'text.bin',\r\n            content: 'hello world!',\r\n            contentType: 'text/plain'\r\n        },\r\n        {   // use URL as an attachment\r\n            filename: 'license.txt',\r\n            path: 'https://raw.github.com/nodemailer/nodemailer/master/LICENSE'\r\n        },\r\n        {   // encoded string as an attachment\r\n            filename: 'text1.txt',\r\n            content: 'aGVsbG8gd29ybGQh',\r\n            encoding: 'base64'\r\n        },\r\n        {   // data uri as an attachment\r\n            path: 'data:text/plain;base64,aGVsbG8gd29ybGQ='\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## Alternatives\r\nIn addition to text and HTML, any kind of data can be inserted as an alternative content of the main body - for example a word processing document with the same text as in the HTML field. It is the job of the e-mail client to select and show the best fitting alternative to the reader. Usually this field is used for calendar events and such.\r\n\r\nAlternative objects use the same options as [attachment objects](#attachments). The difference between an attachment and an alternative is the fact that attachments are placed into _multipart/mixed_ or _multipart/related_ parts of the message white alternatives are placed into _multipart/alternative_ part.\r\n\r\n**Usage example:**\r\n\r\n```javascript\r\nvar mailOptions = {\r\n    ...\r\n    html: '<b>Hello world!</b>',\r\n    alternatives: [\r\n        {\r\n            contentType: 'text/x-web-markdown',\r\n            content: '**Hello world!**'\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nAlternatives can be added as many as you want.\r\n\r\n## Headers\r\n\r\nMost messages do not need any kind of tampering with the headers. If you do need to add custom headers either to the message or to an attachment/alternative, you can add these values with the `headers` option. Values are processed automatically, non-ascii strings are encoded as mime-words and long lines are folded.\r\n\r\n```javascript\r\nvar mail = {\r\n    ...,\r\n    headers: {\r\n        'x-my-key': 'header value',\r\n        'x-another-key': 'another value'\r\n    }\r\n}\r\n\r\n// X-My-Key: header value\r\n// X-Another-Key: another value\r\n```\r\n\r\n### Multiple rows\r\n\r\nThe same header key can be used multiple times if the header value is an Array\r\n\r\n```javascript\r\nvar mail = {\r\n    ...,\r\n    headers: {\r\n        'x-my-key': [\r\n            'value for row 1',\r\n            'value for row 2',\r\n            'value for row 3'\r\n        ]\r\n    }\r\n}\r\n\r\n// X-My-Key: value for row 1\r\n// X-My-Key: value for row 2\r\n// X-My-Key: value for row 3\r\n```\r\n\r\n### Prepared headers\r\n\r\nNormally all headers are encoded and folded to meet the requirement of having plain-ASCII messages with lines no longer than 78 bytes. Sometimes it is preferable to not modify header values and pass these as provided. This can be achieved with the `prepared` option:\r\n\r\n```javascript\r\nvar mail = {\r\n    ...,\r\n    headers: {\r\n        'x-processed': 'a really long header or value with non-ascii characters üëÆ',\r\n        'x-unprocessed': {\r\n            prepared: true,\r\n            value: 'a really long header or value with non-ascii characters üëÆ'\r\n        }\r\n    }\r\n}\r\n\r\n// X-Processed: a really long header or value with non-ascii characters\r\n//  =?UTF-8?Q?=F0=9F=91=AE?=\r\n// X-Unprocessed: a really long header or value with non-ascii characters üëÆ\r\n```\r\n\r\n## Address Formatting\r\nAll the e-mail addresses can be plain e-mail addresses\r\n\r\n```\r\nfoobar@blurdybloop.com\r\n```\r\n\r\nor with formatted name (includes unicode support)\r\n\r\n```\r\n\"–ù–æ–¥–µ –ú–∞–π–ª–µ—Ä\" <foobar@blurdybloop.com>\r\n```\r\n\r\n> Notice that all address fields (even `from:`) are comma separated lists, so if you want to use a comma in the name part, make sure you enclose the name in double quotes: `\"–ú–∞–π–ª–µ—Ä, –ù–æ–¥–µ\" <foobar@blurdybloop.com>`\r\n\r\nor as an address object (in this case you do not need to worry about the formatting, no need to use quotes etc.)\r\n\r\n```\r\n{\r\n    name: '–ú–∞–π–ª–µ—Ä, –ù–æ–¥–µ',\r\n    address: 'foobar@blurdybloop.com'\r\n}\r\n```\r\n\r\nAll address fields accept comma separated list of e-mails or an array of e-mails or an array of comma separated list of e-mails or address objects - use it as you like. Formatting can be mixed.\r\n\r\n```\r\n...,\r\nto: 'foobar@blurdybloop.com, \"–ù–æ–¥–µ –ú–∞–π–ª–µ—Ä\" <bar@blurdybloop.com>, \"Name, User\" <baz@blurdybloop.com>',\r\ncc: ['foobar@blurdybloop.com', '\"–ù–æ–¥–µ –ú–∞–π–ª–µ—Ä\" <bar@blurdybloop.com>, \"Name, User\" <baz@blurdybloop.com>'],\r\nbcc: ['foobar@blurdybloop.com', {name: '–ú–∞–π–ª–µ—Ä, –ù–æ–¥–µ', address: 'foobar@blurdybloop.com'}]\r\n...\r\n```\r\n\r\nYou can even use unicode domains, these are automatically converted to punycode\r\n\r\n```\r\n'\"Unicode Domain\" <info@m√ºriaad-pol√ºteism.info>'\r\n```\r\n\r\n## SMTP envelope\r\nSMTP envelope is usually auto generated from `from`, `to`, `cc` and `bcc` fields but if for some reason you want to specify it yourself (custom envelopes are usually used for VERP addresses), you can do it with `envelope` property.\r\n\r\n`envelope` is an object with the following params: `from`, `to`, `cc` and `bcc` just like with regular mail options. You can also use the regular address format, unicode domains etc.\r\n\r\n```javascript\r\nmailOptions = {\r\n    ...,\r\n    from: 'mailer@kreata.ee', // listed in rfc822 message header\r\n    to: 'daemon@kreata.ee', // listed in rfc822 message header\r\n    envelope: {\r\n        from: '\"Daemon\" <deamon@kreata.ee>', // used as MAIL FROM: address for SMTP\r\n        to: 'mailer@kreata.ee, \"Mailer\" <mailer2@kreata.ee>' // used as RCPT TO: address for SMTP\r\n    }\r\n}\r\n```\r\n\r\n> Not all transports can use the `envelope` object, for example SES ignores it and only uses the data from the From:, To: etc. headers.\r\n\r\n## Using Embedded Images\r\nAttachments can be used as embedded images in the HTML body. To use this feature, you need to set additional property of the attachment - `cid` (unique identifier of the file) which is a reference to the attachment file. The same `cid` value must be used as the image URL in HTML (using `cid:` as the URL protocol, see example below).\r\n\r\n**NB!** the cid value should be as unique as possible!\r\n\r\n```javascript\r\nvar mailOptions = {\r\n    ...\r\n    html: 'Embedded image: <img src=\"cid:unique@kreata.ee\"/>',\r\n    attachments: [{\r\n        filename: 'image.png',\r\n        path: '/path/to/file',\r\n        cid: 'unique@kreata.ee' //same cid value as in the html img src\r\n    }]\r\n}\r\n```\r\n\r\n## Using templates\r\n\r\nNodemailer allows to use simple built-in templating or alternatively external renderers for common message types.\r\n\r\n```javascript\r\nvar transporter = nodemailer.createTransport(...);\r\nvar send = transporter.templateSender(templates, [defaults]);\r\n\r\n// send a message based on provided templates\r\nsend(mailData, context, callback);\r\n// or\r\nsend(mailData, context).then(...).catch(...);\r\n```\r\n\r\nWhere\r\n\r\n  * **templates** is an object with template strings for built-in renderer or an [EmailTemplate](https://github.com/niftylettuce/node-email-templates) object for more complex rendering\r\n\r\n```javascript\r\n// built-in renderer\r\nvar send = transporter.templateSender({\r\n    subject: 'This template is used for the \"subject\" field',\r\n    text: 'This template is used for the \"text\" field',\r\n    html: 'This template is used for the \"html\" field'\r\n});\r\n// external renderer\r\nvar EmailTemplate = require('email-templates').EmailTemplate;\r\nvar send = transporter.templateSender(new EmailTemplate('template/directory'));\r\n```\r\n\r\n  * **defaults** is an optional object of message data fields that are set for every message sent using this sender\r\n  * **mailData** includes message fields for current message\r\n  * **context** is an object with template replacements, where `key` replaces `{{key}}` when using the built-in renderer\r\n\r\n```javascript\r\nvar templates = {\r\n    text: 'Hello {{username}}!'\r\n};\r\nvar context = {\r\n    username: 'User Name'\r\n};\r\n// results in \"Hello, User Name!\" as the text body\r\n// of the message when using built-in renderer\r\n```\r\n\r\n  * **callback** is the `transporter.sendMail` callback (if not set then the function returns a Promise)\r\n\r\n> **NB!** If using built-in renderer then template variables are HTML escaped for the `html` field but kept as is for other fields\r\n\r\n**Example 1. Built-in renderer**\r\n\r\n```javascript\r\nvar transporter = nodemailer.createTransport('smtps://user%40gmail.com:pass@smtp.gmail.com');\r\n\r\n// create template based sender function\r\nvar sendPwdReminder = transporter.templateSender({\r\n    subject: 'Password reminder for {{username}}!',\r\n    text: 'Hello, {{username}}, Your password is: {{ password }}',\r\n    html: '<b>Hello, <strong>{{username}}</strong>, Your password is:\\n<b>{{ password }}</b></p>'\r\n}, {\r\n    from: 'sender@example.com',\r\n});\r\n\r\n// use template based sender to send a message\r\nsendPwdReminder({\r\n    to: 'receiver@example.com'\r\n}, {\r\n    username: 'Node Mailer',\r\n    password: '!\"\\'<>&some-thing'\r\n}, function(err, info){\r\n    if(err){\r\n       console.log('Error');\r\n    }else{\r\n        console.log('Password reminder sent');\r\n    }\r\n});\r\n```\r\n\r\n**Example 2. External renderer**\r\n\r\n```javascript\r\nvar EmailTemplate = require('email-templates').EmailTemplate;\r\nvar transporter = nodemailer.createTransport('smtps://user%40gmail.com:pass@smtp.gmail.com');\r\n\r\n// create template based sender function\r\n// assumes text.{ext} and html.{ext} in template/directory\r\nvar sendPwdReminder = transporter.templateSender(new EmailTemplate('template/directory'), {\r\n    from: 'sender@example.com',\r\n});\r\n\r\n// use template based sender to send a message\r\nsendPwdReminder({\r\n    to: 'receiver@example.com',\r\n    // EmailTemplate renders html and text but no subject so we need to\r\n    // set it manually either here or in the defaults section of templateSender()\r\n    subject: 'Password reminder'\r\n}, {\r\n    username: 'Node Mailer',\r\n    password: '!\"\\'<>&some-thing'\r\n}, function(err, info){\r\n    if(err){\r\n       console.log('Error');\r\n    }else{\r\n        console.log('Password reminder sent');\r\n    }\r\n});\r\n```\r\n\r\n### Custom renderer\r\n\r\nIn addition to the built-in and node-email-templates based renderers you can also bring your own.\r\n\r\n```javascript\r\nvar sendPwdReminder = transporter.templateSender({\r\n    render: function(context, callback){\r\n        callback(null, {\r\n            html: 'rendered html content',\r\n            text: 'rendered text content'\r\n        });\r\n    }\r\n});\r\n```\r\n\r\n**Example. Using swig-email-templates**\r\n\r\n```javascript\r\nvar EmailTemplates = require('swig-email-templates');\r\nvar transporter = nodemailer.createTransport('smtps://user%40gmail.com:pass@smtp.gmail.com');\r\n\r\n// create template renderer\r\nvar templates = new EmailTemplates();\r\n\r\n// provide custom rendering function\r\nvar sendPwdReminder = transporter.templateSender({\r\n    render: function(context, callback){\r\n        templates.render('pwreminder.html', context, function (err, html, text) {\r\n            if(err){\r\n                return callback(err);\r\n            }\r\n            callback(null, {\r\n                html: html,\r\n                text: text\r\n            });\r\n        });\r\n    }\r\n});\r\n...\r\n```\r\n\r\n## List-\\* headers\r\n\r\nNodemailer includes a helper for setting more complex List-\\* headers with ease.\r\nUse message option `list` to provide all list headers. You do not need to add protocol\r\nprefix for the urls, or enclose the url between &lt; and &gt;, this is handled automatically.\r\n\r\nIf the value is a string, it is treated as an URL. If you want to provide an optional comment,\r\nuse `{url:'url', comment: 'comment'}` object. If you want to have multiple header rows for the\r\nsame List-\\* key, use an array as the value for this key. If you want to have multiple URLs for\r\nsingle List-\\* header row, use an array inside an array.\r\n\r\n> List-\\* headers are treated as pregenerated values, this means that lines are not folded and strings\r\nare not encoded. Use only ascii characters and be prepared for longer header lines.\r\n\r\n```javascript\r\nvar mailOptions = {\r\n    list: {\r\n        // List-Help: <mailto:admin@example.com?subject=help>\r\n        help: 'admin@example.com?subject=help',\r\n        // List-Unsubscribe: <http://example.com> (Comment)\r\n        unsubscribe: {\r\n            url: 'http://example.com',\r\n            comment: 'Comment'\r\n        },\r\n        // List-Subscribe: <mailto:admin@example.com?subject=subscribe>\r\n        // List-Subscribe: <http://example.com> (Subscribe)\r\n        subscribe: [\r\n            'admin@example.com?subject=subscribe',\r\n            {\r\n                url: 'http://example.com',\r\n                comment: 'Subscribe'\r\n            }\r\n        ],\r\n        // List-Post: <http://example.com/post>, <mailto:admin@example.com?subject=post> (Post)\r\n        post: [\r\n            [\r\n                'http://example.com/post',\r\n                {\r\n                    url: 'admin@example.com?subject=post',\r\n                    comment: 'Post'\r\n                }\r\n            ]\r\n        ]\r\n    }\r\n};\r\n```\r\n\r\n# Available Plugins\r\n\r\nIn addition to built-in e-mail fields you can extend these by using plugins.\r\n\r\n  - **[nodemailer-markdown](https://github.com/andris9/nodemailer-markdown)** to use markdown for the content\r\n  - **[nodemailer-dkim](https://github.com/andris9/nodemailer-dkim)** to sign messages with DKIM\r\n  - **[nodemailer-html-to-text](https://github.com/andris9/nodemailer-html-to-text)** to auto generate plaintext content from html\r\n  - **[nodemailer-express-handlebars](https://github.com/yads/nodemailer-express-handlebars)** to auto generate html emails from handlebars/mustache templates\r\n  - **[nodemailer-plugin-inline-base64](https://github.com/mixmaxhq/nodemailer-plugin-inline-base64)** to convert base64 images to attachments\r\n  - **[nodemailer-hashcash](https://github.com/andris9/nodemailer-hashcash)** to generate [hashcash](http://www.hashcash.org/) headers\r\n  - _add yours_ (see plugin api documentation [here](#plugin-api))\r\n\r\n# Using Gmail\r\nEven though Gmail is the fastest way to get started with sending emails, it is by no means a preferable solution unless you are using OAuth2 authentication. Gmail expects the user to be an actual user not a robot so it runs a lot of heuristics for every login attempt and blocks anything that looks suspicious to defend the user from account hijacking attempts. For example you might run into trouble if your server is in another geographical location ‚Äì everything works in your dev machine but messages are blocked in production.\r\n\r\nAdditionally Gmail has came up with the concept of ['less secure'](https://support.google.com/accounts/answer/6010255?hl=en) apps which is basically anyone who uses plain password to login to Gmail, so you might end up in a situation where one username can send (support for 'less secure' apps is enabled) but other is blocked (support for 'less secure' apps is disabled). When using this method make sure to enable the required functionality by completing the \"[captcha enable](https://accounts.google.com/b/0/displayunlockcaptcha)\". Without this, less secure connections won't work.\r\n\r\nTo prevent having login issues you should either use XOAUTH2 (see details [here](https://github.com/nodemailer/nodemailer-smtp-transport#authentication)) or use another provider and preferably a dedicated one like [Mailgun](http://www.mailgun.com/) or [SendGrid](http://mbsy.co/sendgrid/12237825) or any other. Usually these providers have free plans available that are comparable to the daily sending limits of Gmail. Gmail has a limit of 500 recipients a day (a message with one _To_ and one _Cc_ address counts as two messages since it has two recipients) for @gmail.com addresses and 2000 for Google Apps customers, larger SMTP providers usually offer about 200-300 recipients a day for free.\r\n\r\n# Delivering Bulk Mail\r\nHere are some tips how to handle bulk mail, for example if you need to send 10 million messages at once (originally published as a [blog post](http://www.andrisreinman.com/delivering-bulk-mail-with-nodemailer/)).\r\n  1. **Use a dedicated SMTP provider** like [SendGrid](http://mbsy.co/sendgrid/12237825) or [Mailgun](http://www.mailgun.com/) or any other. Do not use services that offer SMTP as a sideline or for free (that's Gmail or the SMTP of your homepage hosting company) to send bulk mail ‚Äì you'll hit all the hard limits immediatelly or get labelled as spam. Basically you get what you pay for and if you pay zero then your deliverability is near zero as well. E-mail might seem free but it is only free to a certain amount and that amount certainly does not include 10 million e-mails in a short period of time.\r\n  2. **Use a dedicated queue manager,** for example [RabbitMQ](http://www.rabbitmq.com/) for queueing the e-mails. Nodemailer creates a callback function with related scopes etc. for every message so it might be hard on memory if you pile up the data for 10 million messages at once. Better to take the data from a queue when there's a free spot in the connection pool (previously sent message returns its callback). See [rabbit-queue](examples/rabbit-queue) for an example of using RabbitMQ queues with Nodemailer connection pool.\r\n  3. **Use [nodemailer-smtp-pool](https://github.com/nodemailer/nodemailer-smtp-pool) transport.** You do not want to have the overhead of creating a new connection and doing the SMTP handshake dance for every single e-mail. Pooled connections make it possible to bring this overhead to a minimum.\r\n  4. **Set `maxMessages` option to `Infinity`** for the nodemailer-smtp-pool transport. Dedicated SMTP providers happily accept all your e-mails as long you are paying for these, so no need to disconnect in the middle if everything is going smoothly. The default value is 100 which means that once a connection is used to send 100 messages it is removed from the pool and a new connection is created.\r\n  5. **Set `maxConnections` to whatever your system can handle.** There might be limits to this on the receiving side, so do not set it to `Infinity`, even 20 is probably much better than the default 5. A larger number means a larger amount of messages are sent in parallel.\r\n  6. **Use file paths not URLs for attachments.** If you are reading the same file from the disk several million times, the contents for the file probably get cached somewhere between your app and the physical hard disk, so you get your files back quicker (assuming you send the same attachment to all recipients). There is nothing like this for URLs ‚Äì every new message makes a fresh HTTP fetch to receive the file from the server.\r\n  7. If the SMTP service accepts HTTP API as well you still might prefer SMTP and not the HTTP API as HTTP introduces additional overhead. You probably want to use HTTP over SMTP if the HTTP API is bulk aware ‚Äì you send a message template and the list of 10 million recipients and the service compiles this information into e-mails itself, you can't beat this with SMTP.\r\n\r\n# Implementing plugins and transports\r\n\r\nThere are 3 stages a plugin can hook to\r\n  1. **'compile'** is the step where e-mail data is set but nothing has been done with it yet. At this step you can modify mail options, for example modify `html` content, add new headers etc. Example: [nodemailer-markdown](https://github.com/andris9/nodemailer-markdown) that allows you to use `markdown` source instead of `text` and `html`.\r\n  2. **'stream'** is the step where message tree has been compiled and is ready to be streamed. At this step you can modify the generated MIME tree or add a transform stream that the generated raw e-mail will be piped through before passed to the transport object. Example: [nodemailer-dkim](https://github.com/andris9/nodemailer-dkim) that adds DKIM signature to the generated message.\r\n  3. **Transport** step where the raw e-mail is streamed to destination. Example: [nodemailer-smtp-transport](https://github.com/nodemailer/nodemailer-smtp-transport) that streams the message to a SMTP server.\r\n\r\n## Including plugins\r\n'compile' and 'stream' plugins can be attached with `use(plugin)` method\r\n\r\n```javascript\r\ntransporter.use(step, pluginFunc)\r\n```\r\n\r\nWhere\r\n- **transporter** is a transport object created with `createTransport`\r\n- **step** is a string, either 'compile' or 'stream' that defines when the plugin should be hooked\r\n- **pluginFunc** is a function that takes two arguments: the mail object and a callback function\r\n\r\n# Plugin API\r\nAll plugins (including transports) get two arguments, the mail object and a callback function.\r\n\r\nMail object that is passed to the plugin function as the first argument is an object with the following properties:\r\n- **data** is the mail data object that is passed to the `sendMail` method\r\n- **message** is the [BuildMail](https://github.com/nodemailer/buildmail) object of the message. This is available for the 'stream' step and for the transport but not for 'compile'.\r\n- **resolveContent** is a helper function for converting Nodemailer compatible stream objects into Strings or Buffers\r\n\r\n## resolveContent()\r\nIf your plugin needs to get the full value of a param, for example the String value for the `html` content, you can use `resolveContent()` to convert Nodemailer compatible content objects to Strings or Buffers.\r\n\r\n```javascript\r\ndata.resolveContent(obj, key, callback)\r\n```\r\n\r\nWhere\r\n- **obj** is an object that has a property you want to convert to a String or a Buffer\r\n- **key** is the name of the property you want to convert\r\n- **callback** is the callback function with (err, value) where `value` is either a String or Buffer, depending on the input\r\n\r\n**Example**\r\n\r\n```javascript\r\nfunction plugin(mail, callback){\r\n    // if mail.data.html is a file or an url, it is returned as a Buffer\r\n    mail.resolveContent(mail.data, 'html', function(err, html){\r\n        if(err){\r\n            return callback(err);\r\n        }\r\n        console.log('HTML contents: %s', html.toString());\r\n        callback();\r\n    });\r\n};\r\n```\r\n\r\n## 'compile'\r\nCompile step plugins get only the `mail.data` object but not `mail.message` in the `mail` argument of the plugin function. If you need to access the `mail.message` as well use 'stream' step instead.\r\n\r\nThis is really straightforward, your plugin can modify the `mail.data` object at will and once everything is finished run the callback function. If the callback gets an error object as an argument, then the process is terminated and the error is returned to the `sendMail` callback.\r\n\r\n**Example**\r\n\r\nThe following plugin checks if `text` value is set and if not converts `html` value to `text` by removing all html tags.\r\n\r\n```javascript\r\ntransporter.use('compile', function(mail, callback){\r\n    if(!mail.text && mail.html){\r\n        mail.text = mail.html.replace(/<[^>]*>/g, ' ');\r\n    }\r\n    callback();\r\n});\r\n```\r\n\r\nSee [plugin-compile.js](examples/plugin-compile.js) for a working example.\r\n\r\n## 'stream'\r\nStreaming step is invoked once the message structure is built and ready to be streamed to the transport. Plugin function still gets `mail.data` but it is included just for the reference, modifying it should not change anything (unless the transport requires something from the `mail.data`, for example `mail.data.envelope`).\r\n\r\nYou can modify the `mail.message` object as you like, the message is not yet streaming anything (message starts streaming when the transport calls `mail.message.createReadStream()`).\r\n\r\nIn most cases you might be interested in the [message.transform()](https://github.com/nodemailer/buildmail#transform) method for applying transform streams to the raw message.\r\n\r\n**Example**\r\n\r\nThe following plugin replaces all tabs with spaces in the raw message.\r\n\r\n```javascript\r\nvar transformer = new (require('stream').Transform)();\r\ntransformer._transform = function(chunk, encoding, done) {\r\n    // replace all tabs with spaces in the stream chunk\r\n    for(var i = 0; i < chunk.length; i++){\r\n        if(chunk[i] === 0x09){\r\n            chunk[i] = 0x20;\r\n        }\r\n    }\r\n    this.push(chunk);\r\n    done();\r\n};\r\n\r\ntransporter.use('stream', function(mail, callback){\r\n    // apply output transformer to the raw message stream\r\n    mail.message.transform(transformer);\r\n    callback();\r\n});\r\n```\r\n\r\nSee [plugin-stream.js](examples/plugin-stream.js) for a working example.\r\n\r\nAdditionally you might be interested in the [message.getAddresses()](https://github.com/nodemailer/buildmail#getaddresses) method that returns the contents for all address fields as structured objects.\r\n\r\n**Example**\r\n\r\nThe following plugin prints address information to console.\r\n\r\n```javascript\r\ntransporter.use('stream', function(mail, callback){\r\n    var addresses = mail.message.getAddresses();\r\n    console.log('From: %s', JSON.stringify(addresses.from));\r\n    console.log('To: %s', JSON.stringify(addresses.to));\r\n    console.log('Cc: %s', JSON.stringify(addresses.cc));\r\n    console.log('Bcc: %s', JSON.stringify(addresses.bcc));\r\n    callback();\r\n});\r\n```\r\n\r\n## Transports\r\nTransports are objects that have a method `send` and properies `name` and `version`. Additionally, if the transport object is an Event Emitter, 'log' events are piped through Nodemailer. A transport object is passed to the `nodemailer.createTransport(transport)` method to create the transporter object.\r\n\r\n**`transport.name`**\r\n\r\nThis is the name of the transport object. For example 'SMTP' or 'SES' etc.\r\n\r\n```javascript\r\ntransport.name = require('package.json').name;\r\n```\r\n\r\n**`transport.version`**\r\n\r\nThis should be the transport module version. For example '0.1.0'.\r\n\r\n```javascript\r\ntransport.version = require('package.json').version;\r\n```\r\n\r\n**`transport.send(mail, callback)`**\r\n\r\nThis is the method that actually sends out e-mails. The method is basically the same as 'stream' plugin functions. It gets two arguments: `mail` and a callback. To start streaming the message, create the stream with `mail.message.createReadStream()`\r\n\r\nCallback function should return an `info` object as the second arugment. This info object should contain `messageId` value with the Message-Id header (without the surrounding < > brackets)\r\n\r\nThe following example pipes the raw stream to the console.\r\n\r\n```javascript\r\ntransport.send = function(mail, callback){\r\n    var input = mail.message.createReadStream();\r\n    var messageId = (mail.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\r\n    input.pipe(process.stdout);\r\n    input.on('end', function() {\r\n        callback(null, {\r\n            messageId: messageId\r\n        });\r\n    });\r\n};\r\n```\r\n\r\n**`transport.close(args*)`**\r\n\r\nIf your transport needs to be closed explicitly, you can implement a `close` method.\r\n\r\nThis is purely optional feature and only makes sense in special contexts (eg. closing a SMTP pool).\r\n\r\n**`transport.isIdle()`**\r\n\r\nIf your transport is able to notify about idling state by issuing `'idle'` events then this method should return if the transport is still idling or not.\r\n\r\n**Wrapping up**\r\n\r\nOnce you have a transport object, you can create a mail transporter out of it.\r\n\r\n```\r\nvar nodemailer = require('nodemailer');\r\nvar transport = require('some-transport-method');\r\nvar transporter = nodemailer.createTransport(transport);\r\ntransporter.sendMail({mail data});\r\n```\r\n\r\nSee [minimal-transport.js](examples/minimal-transport.js) for a working example.\r\n\r\n# License\r\n**Nodemailer** is licensed under [MIT license](https://github.com/nodemailer/nodemailer/blob/master/LICENSE). Basically you can do whatever you want to with it\r\n\r\n--------------------------------------------------------------------------------\r\n\r\nThe Nodemailer logo was designed by [Sven Kristjansen](https://www.behance.net/kristjansen).\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/nodemailer/nodemailer.git"
  },
  "scripts": {
    "test": "grunt"
  },
  "version": "2.3.0"
}
